Git: 
	- Git is a software for tracking changes in any set of files
	- Used for coordinating work among the programmers collaboratively developing 	  "source code" during software development
	- Open Source
	- Super fast
	- Scalable

Using git: 
	CLI: Command Line
	GUI: IDE(vscode), gitlens, gitkraken, sourcetree

Why CLI?
	GUI always has limitations

Install & Setup/Config:
	https://git-scm.com/download/win

Check Version: 
	git --version
	git version 2.31.1.windows.1

Setup/Config:
	Name/User
	Email
	Default Editor (vscode, notepad++, eclipse)
	Line Ending

Type of Config:	
	
	System: All Users
	Global: All repos of current user
	Local: The Current Repo

git (local system) vs github (cloud/web version) 

Config:	https://git-scm.com/docs/git-config
	User: 	git config --global user.name "srmono"
	Email:	git config --global user.email bvsrao91@gmail.com
	Editor: git config --global core.editor "code --wait"
		--wait: flag tell to terminal wait unti I set the vscode editor

Edit Config file:
	git config --global -e

New Line Issues: win/linux/mac

	Windows: git config --global core.autocrlf true
	Mac: 	 git config --global core.autocrlf input

Basic Commands:

Help:
	git --verison
	git --help
	git option --help [ex:- git log --help]

Setup Repo Local: 
	git init

Add file to git stage:
	Add all: git add .
	Add Specific Files: git add fileName1 fileName2
	git add *.js

Commit: 
	git commit -m "initital commit"

Commit Size matters:
	XS: small files
	M: medium files
	XXL: Large files

Note: 
	git add . : add files to stage and then git can start tracking these files
	git commit: move files from stage area to commit


git repo ->  stage -> commit

Check Status: 
	git status (show untracked and modified files in the stage)

Restore/Unstage files:
	git restore --staged <filename>...

Remove Git Repo:
	rm -rf .git [don't do this]

Commit Info:
	ID: unique id generated by git
	Message: commit message
	Date/Time
	Author
	Complete SnapShot

Direct Commit : skip stage
	git commit -am "feature 1 updated" 

List files:
	git ls-files


Ignore files:
	.gitignore (path/dirname, *.log, *.js, name.*.js)

Removing files from repo:
	git rm file_name

Remove files/dir from Stage:
	git rm --cached -r[recursive] dir 
	git rm -f -r dir

 --cached:	to keep the file
  -r: 		recursive
  -f: 		force removal

Check Short Status:
	git status -s

M: Modified
A: Added

A  .gitignore
MM git_commands.txt
A  temp.txt

Left char: 	Staging
Right char: 	Working directory

Check Diff between staged and unstaged files:
	git diff --staged

a - file
b - file

press "q" to exit from diff info

Diff Tools:
	kdiff3
	P4Merge
	Winmerge
	VSCode

Set editor to see diff:
	git config --global diff.tool vscode

	git difftool --staged

Check History:
	git log
	git log --oneline
	git log --oneline --reverse
	git log --oneline -n 2 (2 logs)
	git log --after="yyyy-mm-dd"
	git log --before="yyyy-mm-dd"
	git log --author="srmono"
	git log --grep="new"


Viewing commit: "Which commit what you did?"

	git show 
	git show commit_id

Discard Local changes: 
	git clean -h

Git Diff: 
	git diff --cached git_commands.txt

Git Reset: 
	git reset --hard
	git reset --hard commit_id 


Github:
	git remote add origin https://github.com/srmono/gitpractice.git

	or 
	
	git clone https://github.com/srmono/gitpractice.git

Get Remote Origin:
	git remote -v

Git Branching: 
	Create Branch: git branch branch_name 
	list branches: git branch -l
	checkout branch: git checkout branch_name
	from branch -> to which brnach git merge branch_name

	create and checkout branch: git checkout -b money_transfer_feature

merge/rebase with money_transfer_feature
git checkout -b money_transfer_feature
Made changes in new branch
checkout main -> git pull 
chekcout new branch -> git rebase with main
checkout main -> git rebase with new branch



main is update?

pull from remote
then 

Git Fetch, Git Pull, Git Merge:
	git fetch: it will fetch only the changes of remote repo, it wont merge with local
	git merge: merge local repo with fetch changes
	
	git pull: git fetch + git merge

	
Git Stash:
	git stash save "l"
	git stash list
	git stash apply
	git stash pop
	git stash show
	git stash clear
	git stash drop


Today's Agenda:

	Git Rebase & Squash
	React Testing
	React Project Setup (routing, )
	Jenkins 

Rebase vs Merge:
Rebase WorkFlow:
	git checkout -b money_transfer_feature
	git add .
	git commit -m "message"
	git checkout main 
	git pull
		(if any changes add and commit)
	git checkout money_transfer_feature
	git rebase main
	git checkout main 
	git rebase money_transfer_feature

Squash: It is a technique that help you to take a series of commits and condense it to a few commits

	git commit (make multiple commits)
	git rebase -i commit_id  (this will open in an editor)
	pick / squash 
		(pick: which commits want to pick)
		(squash: which commits you want to remove)
	SAVE & CLOSE THE FILE
	AGAIN
	COMMIT_EDITMSG FILE WILL OPEN
		(Remove all other commit messages , and add your own message)
	SAVE & CLOSE THE FILE
	
PULL Request: 
	
Master Branch: 	DBS Project (TL)


git pull
check app in your local system
then add & commit

Triveni Dev:  Tri_branch  (Implemented features)


100 commits -> 10 or 1 


-------------------------------------------------









